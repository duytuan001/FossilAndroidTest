plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'

    id 'dagger.hilt.android.plugin'
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("release-keystore.properties")
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    buildFeatures {
        dataBinding true
    }

    defaultConfig {
        applicationId "com.duytuan.screeningtest.question2"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation"  : "$projectDir/schemas".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"]
            }
        }
    }

    signingConfigs {
//        release {
//            storeFile file(keystoreProperties.getProperty("storeFile"))
//            storePassword keystoreProperties.getProperty("storePassword")
//            keyAlias keystoreProperties.getProperty("keyAlias")
//            keyPassword keystoreProperties.getProperty("keyPassword")
//        }
    }

    buildTypes {
        release {
            minifyEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.release
        }

        debug {
            minifyEnabled false
            debuggable true
        }
    }

    compileOptions {
        sourceCompatibility options.sourceCompatibility
        targetCompatibility options.targetCompatibility
        coreLibraryDesugaringEnabled true
    }

    kotlinOptions {
        jvmTarget = options.jvmTarget
    }

    sourceSets {
        main {
            res.srcDirs = ['src/main/res']
        }
    }

    bundle {
        language { enableSplit = false }
        density { enableSplit = true }
        abi { enableSplit = true }
    }

    splits {
        abi {
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'mips', 'x86', 'x86_64'
            universalApk false
        }
    }
}

dependencies {
    implementation project(":core")
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:${versions.desugar_jdk}"

    implementation "androidx.room:room-runtime:${versions.androidx_room}"
    kapt "androidx.room:room-compiler:${versions.androidx_room}"

    implementation "androidx.work:work-runtime-ktx:${versions.androidx_work}"
    implementation "androidx.paging:paging-runtime-ktx:${versions.androidx_paging}"

    implementation "com.google.dagger:hilt-android:${hilt_version}"
    kapt "com.google.dagger:hilt-compiler:${hilt_version}"
//    implementation "androidx.hilt:hilt-work:${versions.androidx_hilt}"
//    kapt "androidx.hilt:hilt-compiler:${versions.androidx_hilt}"

    testImplementation "junit:junit:${versions.junit}"
    androidTestImplementation "androidx.test.ext:junit:${versions.androidx_junit}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${versions.androidx_espresso}"
}